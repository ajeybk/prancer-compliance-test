{
    "testSet": [
        {
            "masterTestName": "AWS_ack_TEST",
            "version": "0.1",
            "cases": [
                {
                    "masterTestId": "TEST_API_GATEWAY",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(apigateway.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0002-ACK",
                            "eval": "data.rule.api_gw_cert",
                            "message": "data.rule.api_gw_cert_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS API Gateway endpoints without client certificate authentication",
                    "description": "API Gateway can generate an SSL certificate and use its public key in the backend to verify that HTTP requests to your backend system are from API Gateway. This allows your HTTP backend to control and accept only requests originating from Amazon API Gateway, even if the backend is publicly accessible.</br> </br> Note: Some backend servers may not support SSL client authentication as API Gateway does and could return an SSL certificate error. For a list of incompatible backend servers, see Known Issues. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-known-issues.html",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_DYNAMODB",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(dynamodb.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0036-ACK",
                            "eval": "data.rule.dynamodb_encrypt",
                            "message": "data.rule.dynamodb_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS DynamoDB encrypted using AWS owned CMK instead of AWS managed CMK",
                    "description": "This policy identifies the DynamoDB tables that use AWS owned CMK (default ) instead of AWS managed CMK (KMS ) to encrypt data. AWS managed CMK provide additional features such as the ability to view the CMK and key policy, and audit the encryption and decryption of DynamoDB tables.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_CACHE_1",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticache.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0055-ACK",
                            "eval": "data.rule.cache_failover",
                            "message": "data.rule.cache_failover_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS ElastiCache Redis cluster with Multi-AZ Automatic Failover feature set to disabled",
                    "description": "This policy identifies ElastiCache Redis clusters which have Multi-AZ Automatic Failover feature set to disabled. It is recommended to enable the Multi-AZ Automatic Failover feature for your Redis Cache cluster, which will improve primary node reachability by providing read replica in case of network connectivity loss or loss of availability in the primary's availability zone for read/write operations.</br> Note: Redis cluster Multi-AZ with automatic failover does not support T1 and T2 cache node types and is only available if the cluster has at least one read replica.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_CACHE_2",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticache.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0056-ACK",
                            "eval": "data.rule.cache_redis_auth",
                            "message": "data.rule.cache_redis_auth_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS ElastiCache Redis cluster with Redis AUTH feature disabled",
                    "description": "This policy identifies ElastiCache Redis clusters which have Redis AUTH feature disabled. Redis AUTH can improve data security by requiring the user to enter a password before they are granted permission to execute Redis commands on a password protected Redis server.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_CACHE_3",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticache.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0057-ACK",
                            "eval": "data.rule.cache_redis_encrypt",
                            "message": "data.rule.cache_redis_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS ElastiCache Redis cluster with encryption for data at rest disabled",
                    "description": "This policy identifies ElastiCache Redis clusters which have encryption for data at rest(at-rest) is disabled. It is highly recommended to implement at-rest encryption in order to prevent unauthorized users from reading sensitive data saved to persistent media available on your Redis clusters and their associated cache storage systems.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_CACHE_4",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticache.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0058-ACK",
                            "eval": "data.rule.cache_encrypt",
                            "message": "data.rule.cache_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS ElastiCache Redis cluster with in-transit encryption disabled",
                    "description": "This policy identifies ElastiCache Redis clusters which have in-transit encryption disabled. It is highly recommended to implement in-transit encryption in order to protect data from unauthorized access as it travels through the network, between clients and cache servers. Enabling data encryption in-transit helps prevent unauthorized users from reading sensitive data between your Redis clusters and their associated cache storage systems.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_SEARCH_1",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0074-ACK",
                            "eval": "data.rule.esearch_vpc",
                            "message": "data.rule.esearch_vpc_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS ElasticSearch cluster not in a VPC",
                    "description": "VPC support for Amazon ES is easy to configure, reliable, and offers an extra layer of security. With VPC support, traffic between other services and Amazon ES stays entirely within the AWS network, isolated from the public Internet. You can manage network access using existing VPC security groups, and you can use AWS Identity and Access Management (IAM) policies for additional protection. VPC support for Amazon ES domains is available at no additional charge.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_SEARCH_2",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0076-ACK",
                            "eval": "data.rule.esearch_encrypt",
                            "message": "data.rule.esearch_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS Elasticsearch domain Encryption for data at rest is disabled",
                    "description": "This policy identifies Elasticsearch domains for which encryption is disabled. Encryption of data at rest is required to prevent unauthorized users from accessing the sensitive information available on your Elasticsearch domains components. This may include all data of file systems, primary and replica indices, log files, memory swap files and automated snapshots. The Elasticsearch uses AWS KMS service to store and manage the encryption keys. It is highly recommended to implement encryption at rest when you are working with production data that have sensitive information, to protect from unauthorized access.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_SEARCH_3",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0077-ACK",
                            "eval": "data.rule.esearch_master",
                            "message": "data.rule.esearch_master_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS Elasticsearch domain has Dedicated master set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Dedicated master is disabled in your AWS account. If dedicated master nodes are provided those handle the management tasks and cluster nodes can easily manage index and search requests from different types of workload and make them more resilient in production. Dedicated master nodes improve environmental stability by freeing all the management tasks from the cluster data nodes.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_ELASTIC_SEARCH_4",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(elasticsearch.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0080-ACK",
                            "eval": "data.rule.esearch_zone_awareness",
                            "message": "data.rule.esearch_zone_awareness_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS Elasticsearch domain has Zone Awareness set to disabled",
                    "description": "This policy identifies Elasticsearch domains for which Zone Awareness is disabled in your AWS account. Enabling Zone Awareness (cross-zone replication) increases the availability by distributing your Elasticsearch data nodes across two availability zones available in the same AWS region. It also prevents data loss and minimizes downtime in the event of node or availability zone failure.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_1",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0121-ACK",
                            "eval": "data.rule.rds_public",
                            "message": "data.rule.rds_public_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS database instance is publicly accessible",
                    "description": "This policy identifies RDS database instances which are publicly accessible.DB instances should not be publicly accessible to protect the integrety of data.Public accessibility of DB instances can be modified by turning on or off the Public accessibility parameter.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_2",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0125-ACK",
                            "eval": "data.rule.rds_encrypt",
                            "message": "data.rule.rds_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS instance is not encrypted",
                    "description": "This policy identifies AWS RDS instances which are not encrypted. Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up and manage databases. Amazon allows customers to turn on encryption for RDS which is recommended for compliance and security reasons.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_3",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0127-ACK",
                            "eval": "data.rule.rds_multiaz",
                            "message": "data.rule.rds_multiaz_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS instance with Multi-Availability Zone disabled",
                    "description": "This policy identifies RDS instances which have Multi-Availability Zone(Multi-AZ) disabled. When RDS DB instance is enabled with Multi-AZ, RDS automatically creates a primary DB Instance and synchronously replicates the data to a standby instance in a different availability zone. These Multi-AZ deployments will improve primary node reachability by providing read replica in case of network connectivity loss or loss of availability in the primaryâ€™s availability zone for read/write operations, so by making them the best fit for production database workloads.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_4",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0128-ACK",
                            "eval": "data.rule.rds_snapshot",
                            "message": "data.rule.rds_snapshot_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS instance with copy tags to snapshots disabled",
                    "description": "This policy identifies RDS instances which have copy tags to snapshots disabled. Copy tags to snapshots copies all the user-defined tags from the DB instance to snapshots. Copying tags allow you to add metadata and apply access policies to your Amazon RDS resources.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_5",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0129-ACK",
                            "eval": "data.rule.rds_backup",
                            "message": "data.rule.rds_backup_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS instance without Automatic Backup setting",
                    "description": "This policy identifies RDS instances which are not set with the Automatic Backup setting. If Automatic Backup is set, RDS creates a storage volume snapshot of your DB instance, backing up the entire DB instance and not just individual databases which provide for point-in-time recovery. The automatic backup will happen during the specified backup window time and keeps the backups for a limited period of time as defined in the retention period. It is recommended to set Automatic backups for your critical RDS servers that will help in the data restoration process.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_6",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0130-ACK",
                            "eval": "data.rule.rds_upgrade",
                            "message": "data.rule.rds_upgrade_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS minor upgrades not enabled",
                    "description": "When Amazon Relational Database Service (Amazon RDS) supports a new version of a database engine, you can upgrade your DB instances to the new version. There are two kinds of upgrades: major version upgrades and minor version upgrades. Minor upgrades helps maintain a secure and stable RDS with minimal impact on the application. For this reason, we recommend that your automatic minor upgrade is enabled. Minor version upgrades only occur automatically if a minor upgrade replaces an unsafe version, such as a minor upgrade that contains bug fixes for a previous version.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_RDS_7",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(rds.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0131-ACK",
                            "eval": "data.rule.rds_retention",
                            "message": "data.rule.rds_retention_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS RDS retention policy less than 7 days",
                    "description": "RDS Retention Policies for Backups are an important part of your DR/BCP strategy. Recovering data from catastrophic failures, malicious attacks, or corruption often requires a several day window of potentially good backup material to leverage. As such, the best practice is to ensure your RDS clusters are retaining at least 7 days of backups, if not more (up to a maximum of 35).",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SNS_1",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sns.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0153-ACK",
                            "eval": "data.rule.sns_encrypt_key",
                            "message": "data.rule.sns_encrypt_key_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS SNS topic encrypted using default KMS key instead of CMK",
                    "description": "This policy identifies Amazon Simple Notification Service (SNS) topics that are encrypted with the default AWS Key Management Service (KMS) keys. As a best practice, use Customer Master Keys (CMK) to encrypt the data in your SNS topics and ensure full control over your data.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                },
                {
                    "masterTestId": "TEST_SNS_2",
                    "masterSnapshotId": [
                        "ACK_TEMPLATE_SNAPSHOT"
                    ],
                    "type": "rego",
                    "rule": "file(sns.rego)",
                    "evals": [
                        {
                            "id": "PR-AWS-0154-ACK",
                            "eval": "data.rule.sns_encrypt",
                            "message": "data.rule.sns_encrypt_err",
                            "remediationDescription": "",
                            "remediationFunction": ""
                        }
                    ],
                    "severity": "Medium",
                    "title": "AWS SNS topic with server-side encryption disabled",
                    "description": "This policy identifies Amazon Simple Notification Service (SNS) topics that have server-side encryption disabled. As a best practice, enable server-side encryption for at-rest encryption of message content published to SNS topics. When you publish a message, the SNS encrypts your message as soon as it receives it, and decrypts it just prior to delivery.",
                    "tags": [
                        {
                            "cloud": "git",
                            "compliance": [],
                            "service": [
                                "ack"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}